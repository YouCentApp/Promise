@inherits LayoutComponentBase
@using System.Text.Json
@using System.Text
@inject ISessionStorage sessionStorage
@inject AppState appState
@inject ISettings settings
@inject NavigationManager navigationManager
@inject IMyEnvironment myEnvironment
@inject INavigationManager navigationManagerCrossplatform

<div class="page">
    <div class="sidebar">

        <NavMenu IsSignedIn="@isSignedIn" />

    </div>

    <main>
        <div class="top-row px-4">
            @if (isSignedIn)
            {
                <NavLink class="nav-link" href="/signout">Sign Out</NavLink>
            }
            else
            {
                <NavLink class="nav-link" href="/signin">Sign In</NavLink>
            }
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    private bool isSignedIn;
    private string api => settings.ApiUrl;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // If update is required, don't allow anything else to happen
        if (appState.IsUpdateRequired)
        {
            await navigationManagerCrossplatform.NavigateToAsync("UpdateApp");
            return;
        }

        if (firstRender)
        {
            if (myEnvironment.IsNative())
            {
                if (myEnvironment.IsCutOff())
                {
                    appState.IsCutOff = true;
                    navigationManager.NavigateTo("/cutoff");
                    return;
                }
                else
                {
                    appState.IsCutOff = false;
                    if (await CheckIfNativeAppMustBeUpdated())
                    {
                        // Set the flag that an update is required
                        appState.IsUpdateRequired = true;
                        await navigationManagerCrossplatform.NavigateToAsync("UpdateApp");
                        return;
                    }
                }
            }
        }
        if (appState.IsCutOff)
        {
            return;
        }
        if (!isSignedIn && !appState.IsSignedInChecked && !appState.IsSignedInChecking)
        {
            appState.IsSignedInChecking = true;
            navigationManager.NavigateTo("/signin");
            return;
        }
        if (appState.IsSignedInChecked && appState.IsSignedInChecking)
        {
            appState.IsSignedInChecking = false;
            isSignedIn = appState.IsSignedIn;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfNativeAppMustBeUpdated()
    {
        var currentVersion = new
        {
            Major = AppVersion.Major,
            Minor = AppVersion.Minor,
            Build = AppVersion.Build
        };

        try
        {
            using var httpClient = new HttpClient();
            var response = await httpClient.GetAsync($"{api}/minversup");

            if (response.IsSuccessStatusCode)
            {
                var minimumVersion = await response.Content.ReadFromJsonAsync<AppMinimumVersion>();
                
                // Make sure we have valid version data before comparing
                if (minimumVersion is not null && 
                    minimumVersion.Major >= 0 && 
                    minimumVersion.Minor >= 0 && 
                    minimumVersion.Build >= 0)
                {
                    // Compare the current version with the minimum supported version
                    if (currentVersion.Major < minimumVersion.Major ||
                    (currentVersion.Major == minimumVersion.Major && currentVersion.Minor < minimumVersion.Minor) ||
                    (currentVersion.Major == minimumVersion.Major && currentVersion.Minor == minimumVersion.Minor && currentVersion.Build <
                    minimumVersion.Build))
                    {
                        return true; // App must be updated
                    }
                }
                else
                {
                    // Log if we received invalid version data
                    MainLogger.LogError("Received invalid minimum version data from API");
                }
            }
            else
            {
                MainLogger.LogError("Error checking app version. Response code: " + response.StatusCode);
            }
        }
        catch (HttpRequestException ex)
        {
            MainLogger.LogError("Network error while checking app version: " + ex.Message);
        }
        catch (Exception ex)
        {
            MainLogger.LogError("Unexpected error while checking app version: " + ex.Message);
        }

        return false; // App does not need to be updated by default
    }
}