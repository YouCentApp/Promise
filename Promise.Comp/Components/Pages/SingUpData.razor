@page "/signupdata"
@using System.Text
@using System.Text.RegularExpressions
@using System.Text.Json
@inject NavigationManager navigationManager
@inject ISessionStorage sessionStorage
@inject ISettings settings
@inject AppState appState


<h1>Sign Up - Adding Optional Personal Data</h1>
<h2>It can be used for recovery and contacting purposes</h2>

<div class="container">
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" @bind="@Email">
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <input type="tel" class="form-control" @bind="@PhoneNumber">
    </div>
    <div class="form-group">
        <label for="secretWord">Secret Word</label>
        <input type="password" class="form-control" @bind="@SecretWord">
    </div>
    <button type="submit" class="btn btn-primary" @onclick="SubmitForm">Submit</button>
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string? Email { get; set; }
    private string? PhoneNumber { get; set; }
    private string? SecretWord { get; set; }
    private string? errorMessage;
    private string api => settings.ApiUrl;

    protected override void OnAfterRender(bool firstRender)
    {
        if (appState.IsCutOff)
        {
            navigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task SubmitForm()
    {
        ValidateForm();

        if (string.IsNullOrEmpty(errorMessage))
        {
            try
            {
                var user = new User
                    {
                        Id = Convert.ToInt64(await sessionStorage.GetAsync<string>("UserId")),
                        Login = await sessionStorage.GetAsync<string>("Username"),
                        Password = await sessionStorage.GetAsync<string>("Password")
                    };
                var data = new PersonalData
                    {
                        Email = Email,
                        Tel = PhoneNumber,
                        Secret = SecretWord,
                    };
                var userData = new UserData
                    {
                        User = user,
                        PersonalData = data
                    };
                using var httpClient = new HttpClient();
                var json = JsonSerializer.Serialize(userData);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync($"{api}/dataupdate", content);
                var responseObject = await response.Content.ReadFromJsonAsync<ApiResponse>();

                if (response.IsSuccessStatusCode)
                {
                    if (responseObject is not null && responseObject.Success)
                    {
                        await sessionStorage.RemoveAsync("Password");
                        await sessionStorage.RemoveAsync("UserId");
                        navigationManager.NavigateTo("/signin/newsignup");
                    }
                    else
                    {
                        MainLogger.LogError("Error while submitting the form : " + responseObject?.Error);
                        errorMessage = responseObject?.Error ?? "Sorry, something went wrong. Please try again later.";
                    }
                }
                else
                {
                    MainLogger.LogError("Error while submitting the form : " + responseObject?.Error);
                    errorMessage = responseObject?.Error ?? "Sorry, something went wrong. Please try again later.";
                }
            }
            catch (Exception ex)
            {
                MainLogger.LogError("Error while submitting the form : " + ex.Message);
                errorMessage = "Sorry, something went wrong. Please try again later.";
            }
        }
    }


    private void ValidateForm()
    {
        errorMessage = null;

        if (!string.IsNullOrEmpty(Email) && !Regex.IsMatch(Email, @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"))
        {
            errorMessage = "Invalid email format";
        }
        else if (!string.IsNullOrEmpty(PhoneNumber) && !Regex.IsMatch(PhoneNumber, @"^\+(\d{1,5})(\d{1,12})$"))
        {
            errorMessage = "Invalid phone number format";
        }
        else if (!string.IsNullOrEmpty(SecretWord) && SecretWord.Length < 4)
        {
            errorMessage = "Secret word must be at least 8 characters long";
        }
        else if (!string.IsNullOrEmpty(SecretWord) && SecretWord.Length > 40)
        {
            errorMessage = "Secret word must be at most 40 characters long";
        }
    }

}