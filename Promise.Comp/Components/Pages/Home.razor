@page "/"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using System.Net
@inject AppState appState
@inject NavigationManager navigationManager
@inject IMyEnvironment myEnvironment
@inject ISettings settings

<h1>Welcome to YouCent App 2.0</h1>

@if (isSignedIn)
{
    <br>
    <h2>You signed in as <b>@username</b></h2>
    <p>When you want someone to send you YouCent Promises (YCP), simply share your username above. It doesn't matter if
        you use capital letters or not.</p>

    <h2>Some important information</h2>
    <h3>YouCent Promises (YCP) are not real money</h3>
    <p>They are just promises you can get from others by selling them goods and services in order to buy things using
        them in the future, and vice versa.</p>

    <h3>Your Balance: @balance YCP</h3>
    <p>When you promise someone else, your balance will decrease. When someone promises you, your balance will increase.
    </p>

    <h3>Your Promise Limit: @limit YCP</h3>
    <p>You can promise up to this amount even when your balance is equal to zero. When you do it your balance become
        negative for some time.</p>

    <h3>You can promise up to @(limit + balance) YCP</h3>
    <p>This is maximum amount you can promise at the moment. It is the sum of your balance and limit.</p>

    @if (userInforError is not null)
    {
        <br><br>
        <div class="alert alert-danger" role="alert">@userInforError</div>
    }

}
<br><br>
<img src="_content/Promise.Comp/images/youcent-logo-brand.png" alt="YouCent logo" class="img-fluid" />
<br><br>
<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h2>What is it all about?</h2>
            <p>YouCent is a fun and easy to understand FinTech project! Here you buy and sell using promises instead of money. We call them YouCent Promises (YCP).</p>
            <p>You are simply making promises instead of spending money. Then you pay back by providing services or goods back to community and get your promised cents back the same way!</p>
            <p>In fact, these cents are even more real than money because every product and service is produced by people like you. Therefore, you create your cents by promising and keeping your promises of course ;)</p>
            <p>Good and honest people should be always trusted with promising something to be produced or done in future in return of getting something here and now. YouCent helps these people to track those mutual promises (aka “I Owe You Documents”) as digital transactions. We try our best to follow the laws regarding IOU documents exchange by facilitating secure ledger to track the records.</p>
            <p>No currency (including crypto, fiat or any other form) is needed or used in the system to buy or sell YouCent Promises. YouCent is closed nonmonetary project. The virtual exchange rate of YouCent Promise is fixed and equals 100 YCP for 1 USD now. Even though YouCent does not trade Promises for money if the law of the country the YouCent user resides in, does not prohibit to buy, or sell IOU documents, then the users can sell or buy YouCent Promises as they wish.</p>
            <p>Still YouCent does not recommend exchanging promises for money. The exchange rate only helps to evaluate prices in money equivalent. However, if you still decide to sell or buy YCP, then we recommend sticking to this fixed rate of 100 YCP = 1 USD in any circumstances.</p>
            <p>YouCent does not charge for transactions or any other interactions with our apps and services. The only cost of using YouCent could be is an optional annual fee of any amount you choose. By doing this user gets the specific Promise Limit which makes it possible to send Promises even with zero or negative balance. Those fees also play a role of simple, yet robust anti-fraud mechanism.</p>
            <p>For those users who only plan to spend Promises they already received from others, the YouCent system is always free to use.</p>
            <p>We don't want to give a chance for some dishonest people to misuse YouCent by only spending and never give anything back to community. Therefore, every user's goal should be to keep their balance as close to zero as possible at any given time.</p>
            <p>Our mission is to help people exchange great goods and services - not to “make money” or worse to make debts which they never pay back. Please respect each other and welcome aboard!</p>
        </div>
    </div>
</div>


<br><br>
<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h2>Support Us</h2>
            <p>Please consider supporting YouCent project. We do not have investors and funded only by founders' money. We try to be as lean as possible. Everyone works as volunteers to create and promote this great tool for people to use worldwide. Become our sponsor to help cover some infrastructure and development expenses, and small salaries for founders and those team members who really need it. Your support is much needed for this short strategic time until YouCent becomes profitable. Thanks a lot!</p>
            <p>Become our <a href="https://patreon.com/youcent" target="_blank">Patron on Patreon</a> today!</p>
            <p>Donate any amount via cofounder's <a href="https://paypal.me/youcentapp" target="_blank">PayPal</a></p>
        </div>
    </div>
</div>

<br><br>
<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h2>YouCent hopes you enjoy our user-friendly Privacy Policy!</h2>
            <p>None of our websites, web apps, Android apps, iOS apps, Windows apps or any other apps or software we create, use your personal data (when we have it stored) to show you targeted ads, control your behavior, or manipulate you any other way.</p>
            <p>Personal data (if you ever provide it) never shared with any third parties and stored securely. It will be deleted at any moment upon the user's request. It can be used for account access restorations and sending out notifications or any content user subscribed to.</p>
            <p>Normally we never ask for or insist on providing any personal data.</p>
        </div>
    </div>
</div>


<br><br>

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h2>Contact Us</h2>
            <p>E-mail: <a href="mailto:arkfen@youcent.app">arkfen@youcent.app</a></p>
            <p>WhatsApp: <a href="https://wa.me/14384552490">+14384552490</a></p>
            <p>Twitter: <a href="https://twitter.com/YouCentApp">@@YouCentApp</a></p>
        </div>
    </div>
</div>

<br><br>





@code {
    private bool isSignedIn = false;
    private string? username;
    private bool isAuthError = false;
    private string? userInforError;
    private decimal balance;
    private decimal limit;
    private string api => settings.ApiUrl;
    

    protected override async Task OnInitializedAsync()
    {
        isSignedIn = appState.IsSignedIn;
        if (isSignedIn)
        {
            username = appState.Username;
            ApiResponseUserInfo? userInfo = await GetUserInformation(username);
            if (!isAuthError && userInfo is not null)
            {
                balance = userInfo.Balance;
                limit = userInfo.PromiseLimit;
            }
        }
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (isAuthError)
        {
            navigationManager.NavigateTo("/signout");
        }
        if (appState.IsCutOff)
        {
            navigationManager.NavigateTo("/cutoff");
        }
    }

    private async Task<ApiResponseUserInfo?> GetUserInformation(string? username)
    {
        if (username is null)
        {
            isAuthError = true;
            return null;
        }
        var user = new User { Login = username };
        var json = JsonSerializer.Serialize(user);
        var request = new HttpRequestMessage(HttpMethod.Post, $"{api}/userinfo");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", appState.Token);
        request.Content = new StringContent(json, Encoding.UTF8, "application/json");

        try
        {
            using var httpClient = new HttpClient();
            var response = await httpClient.SendAsync(request);

            var responseObject = await response.Content.ReadFromJsonAsync<ApiResponseUserInfo>();

            if (response.IsSuccessStatusCode)
            {
                if (responseObject is not null && responseObject.Success)
                {
                    return responseObject;
                }
                else
                {
                    MainLogger.LogError("Error in GetUserInformation on Home page: " + responseObject?.Error);
                    userInforError = "Sorry, we couldn't get your information. Please try again later.";
                }
            }
            else
            {
                if (response.StatusCode == HttpStatusCode.Unauthorized)
                {
                    isAuthError = true;
                }
                else
                {
                    MainLogger.LogError("Error in GetUserInformation on Home page. Response code: " + response.StatusCode + ". Response error: " + responseObject?.Error);
                    userInforError = "Sorry, we couldn't get your information. Please try again later.";
                }
            }
        }
        catch (HttpRequestException ex)
        {
            MainLogger.LogError("Network error in GetUserInformation on Home page: " + ex.Message);
            userInforError = "Network error. Please check your internet connection and try again.";
        }
        catch (Exception ex)
        {
            MainLogger.LogError("Unexpected error in GetUserInformation on Home page: " + ex.Message);
            userInforError = "An unexpected error occurred. Please try again later.";
        }

        return null;
    }
    
}