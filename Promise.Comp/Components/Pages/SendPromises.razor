@page "/sendpromises"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@inject AppState appState
@inject NavigationManager navigationManager
@inject ISettings settings

<h1>Send Promises!</h1>


<div class="form-group">
    <label for="cents">Cents:</label>
    <input type="number" class="form-control" @bind="cents" />
</div>

<div class="form-group">
    <label for="beneficiary">Beneficiary:</label>
    <input type="text" class="form-control" @bind="beneficiary" />
</div>

<div class="form-group">
    <label for="beneficiary">Memo:</label>
    <input type="text" class="form-control" @bind="memo" />
</div>

<div class="form-group">
    <label for="password">Password:</label>
    <input type="password" class="form-control" @bind="password" />
</div>

<button type="button" class="btn btn-primary" @onclick="SendPrommisesAsync">Send Promises</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}





@code {

    private string? username;
    private long? userId;
    private decimal? cents;
    private string? beneficiary;
    private string? memo;
    private string? password;
    private string api => settings.ApiUrl;
    private string? errorMessage;


    protected override void OnInitialized()
    {
        if (!appState.IsSignedIn)
        {
            navigationManager.NavigateTo("signin");
        }
        username = appState.Username;
        userId = appState.UserId;
    }

    private async Task SendPrommisesAsync()
    {
        errorMessage = null;
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password)
        || userId is not null || cents is not null and > 0 || string.IsNullOrEmpty(beneficiary))
        {
            errorMessage = "Please fill in all fields please!";
            return;
        }
        if (string.IsNullOrEmpty(api))
        {
            MainLogger.LogError("API URL is not set.");
            errorMessage = "Sorry, something went wrong. Please try again later.";
            return;
        }
        var user = new User
            {
                Login = username,
                Password = password,
                Id = userId
            };
        var receiver = new User
            {
                Login = beneficiary
            };
        var transaction = new UserTransaction
            {
                Sender = user,
                Receiver = receiver,
                Amount = cents,
                Memo = memo
            };
        try
        {
            var json = JsonSerializer.Serialize(user);
            var request = new HttpRequestMessage(HttpMethod.Post, $"{api}/sendpromises");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", appState.Token);
            request.Content = new StringContent(json, Encoding.UTF8, "application/json");

            using var httpClient = new HttpClient();
            var response = await httpClient.SendAsync(request);
            var responseObject = await response.Content.ReadFromJsonAsync<ApiResponse>();

            if (response.IsSuccessStatusCode)
            {
                if (responseObject is not null && responseObject.Success)
                {
                    navigationManager.NavigateTo("transactionshistory");
                }
                else
                {
                    errorMessage = "Sorry, something went wrong. Please try again later. Possible reason: "
                    + responseObject?.Error ??
                    "Unknown error...";
                }
            }
            else
            {
                MainLogger.LogError($"An error occurred while sending promises. Username: {username}. Status code: " +
                response.StatusCode);
                errorMessage = "An error occurred while sending promises. Possible reason: "
                + responseObject?.Error ?? "Unknown error...";
            }
        }
        catch (Exception ex)
        {
            MainLogger.LogError($"An error occurred while sending promises. Username: {username}. Exception: " + ex.Message);
            errorMessage = "An error occurred while sending promises.";
        }

    }









}
