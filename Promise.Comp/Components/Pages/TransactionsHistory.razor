@page "/transactionshistory"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@inject AppState appState
@inject NavigationManager navigationManager
@inject ISettings settings

<h1>Transactions History</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Username</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Memo</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transactions)
                    {
                        <tr>
                            <td>@transaction.Id</td>
                            @if (@transaction.ReceiverLogin == username)

                            {
                                <td>@transaction.SenderLogin</td>
                                <td><span class="text-success">+@transaction.Cents</span></td>
                            }
                            else
                            {
                                <td>@transaction.ReceiverLogin</td>
                                <td><span class="text-danger">-@transaction.Cents</span></td>
                            }
                            <td>@transaction.Date</td>
                            <td>@transaction.Memo</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between">
                <button class="btn btn-primary" @onclick="SortByDateAsc">Sort by Date Asc</button>
                <button class="btn btn-primary" @onclick="SortByDateDesc">Sort by Date Desc</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between">
                @if (offset > 0)
                {
                    <button class="btn btn-primary" @onclick="GoBack">Previous Page</button>
                }
                <button class="btn btn-primary" @onclick="GoForward">Next Page</button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}

@code {
    private List<SimpleUserTransaction> transactions = [];
    private int offset;
    private string? username;
    private int limit = 10;
    private DateTime from = DateTime.Now - TimeSpan.FromDays(5000);
    private DateTime to = DateTime.Now;
    private string api => settings.ApiUrl;
    private string? errorMessage;


    protected override async Task OnInitializedAsync()
    {
        if (!appState.IsSignedIn)
        {
            navigationManager.NavigateTo("signin");
        }
        username = appState.Username;

        if (string.IsNullOrEmpty(api))
        {
            MainLogger.LogError("API URL is not set.");
            errorMessage = "Sorry, something went wrong. Please try again later.";
            return;
        }

        transactions = await FetchTransactions();
        if (transactions.Count == 0)
        {
            errorMessage = "No transactions found.";
        }
    }

    private async Task<List<SimpleUserTransaction>> FetchTransactions()
    {
        List<SimpleUserTransaction> transactions = [];
        var transactionsHistoryInfo = new TransactionsHistoryInfo
            {
                User = new User
                {
                    Login = username
                },
                Limit = limit,
                Offset = offset,
                From = from,
                To = to
            };
        try
        {
            var json = JsonSerializer.Serialize(transactionsHistoryInfo);
            var request = new HttpRequestMessage(HttpMethod.Post, $"{api}/gettransactions");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", appState.Token);
            request.Content = new StringContent(json, Encoding.UTF8, "application/json");

            using var httpClient = new HttpClient();
            var response = await httpClient.SendAsync(request);
            var responseObject = await response.Content.ReadFromJsonAsync<ApiResponseUserTransactions>();

            if (response.IsSuccessStatusCode)
            {
                if (responseObject is not null && responseObject.Success && responseObject.Transactions is not null)
                {
                    transactions = responseObject.Transactions;
                    return transactions;
                }
                else
                {
                    MainLogger.LogError($"An error occurred while getting transactions history. Username: {username}.");
                }
            }
            else
            {
                MainLogger.LogError($"An error occurred while getting transactions history. Username: {username}. Status code: " +
                response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            MainLogger.LogError($"An error occurred while getting transactions history. Username: {username}. Exception: " +
            ex.Message);
        }

        return transactions;
    }

    private void SortByDateAsc()
    {
        // Implement the logic to sort the transactions by date in ascending order
    }

    private void SortByDateDesc()
    {
        // Implement the logic to sort the transactions by date in descending order
    }

    private void GoBack()
    {
        // Implement the logic to navigate to the previous page of transactions
    }

    private async Task GoForward()
    {
        offset += limit;
        transactions = await FetchTransactions();
    }
}
