@page "/signin"
@using System.Text.Json
@using System.Text
@inject ISettings settings

<h1>Sign In</h1>

<div class="container">
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" class="form-control" @bind="username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" class="form-control" @bind="password" />
    </div>

    <button class="btn btn-primary" @onclick="TrySignInAsync">Submit</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <div class="text-center mt-4">
        <p>Don't have an account?
            <a href="/signup" class="btn btn-link">Sign up</a>
        </p>
    </div>

</div>

@code {
    private string? username;
    private string? password;
    private string? errorMessage;
    private string api => settings.ApiUrl;

    private async Task TrySignInAsync()
    {
        ValidateForm();

        if (string.IsNullOrEmpty(errorMessage))
        {
            if (string.IsNullOrEmpty(api))
            {
                MainLogger.LogError("API URL is not set.");
                errorMessage = "Sorry, something went wrong. Please try again later.";
                return;
            }
            var user = new User
                {
                    Login = username,
                    Password = password
                };
            var json = JsonSerializer.Serialize(user);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            using var httpClient = new HttpClient();
            var response = await httpClient.PostAsync($"{api}/signin", content);
            var responseObject = await response.Content.ReadFromJsonAsync<ApiResponseUser>();

            if (response.IsSuccessStatusCode)
            {
                if (responseObject is not null && responseObject.Success)
                {
                    var token = response.Headers.GetValues("Authorization").FirstOrDefault();
                    // Store the token in a global state variable
                    // $GLOBAL_STATE_VARIABLE$ = token;
                    // and then redirect to the home page...
                    //temp
                    //errorMessage = " API returned token " + token;
                }
                else
                {
                    errorMessage = responseObject?.Error ?? "Sorry, something went wrong. Please try again later.";
                }
            }
            else
            {
                errorMessage = responseObject?.Error ?? "Sorry, something went wrong. Please try again later.";
            }
        }
    }

    private void ValidateForm()
    {
        errorMessage = string.Empty;

        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Please enter a username and password.";
            return;
        }
        if (username?.Length > Policy.MaximumUsernameLength || password?.Length > Policy.MaximumPasswordLength)
        {
            errorMessage = "Username or/and password must be shorter.";
            return;
        }
    }
}