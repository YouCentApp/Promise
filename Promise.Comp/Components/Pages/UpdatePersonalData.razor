@page "/updatepersonaldata"
@using System.Text.Json
@using System.Text
@using System.Text.RegularExpressions
@inject AppState appState
@inject NavigationManager navigationManager
@inject ISettings settings

<h1>Update Personal Data</h1>
<br>
<h2>
    Chose what you want to update by checking a box. If you want to
    remove previously stored data, just leave the specific field
    as it is (do not enter anything) after checking the coresponding box.
</h2>

<br>
<div>
    <div class="form-group col-md-6">
        <input type="checkbox" @bind="isEmailEnabled" /> <label for="email">Email</label>
        <input type="email" id="email" class="form-control" placeholder="Enter email" @bind="email"
        disabled="@(!isEmailEnabled)" />
        <br>
    </div>
    <div class="form-group col-md-6">
        <input type="checkbox" @bind="isTelephoneEnabled" /> <label for="tel">Telephone</label>
        <div class="d-flex">
            <select class="form-control me-2" @bind="selectedCountryCode" disabled="@(!isTelephoneEnabled)">
                <option value="">Chose Country Code</option>
                @foreach (var country in CountryCode.Values)
                {
                    <option value="+@country.Code">@country.Name (+@country.Code)</option>
                }
            </select>
            <input type="tel" id="tel" class="form-control" placeholder="Enter telephone" @bind="telephone"
            disabled="@(!isTelephoneEnabled)" />
        </div>
        <br>
    </div>
    <div class="form-group col-md-6">
        <input type="checkbox" @bind="isSecretWordEnabled" /> <label for="secret">Secret Word</label>
        <input type="password" id="secret" class="form-control" placeholder="Enter secret word" @bind="secretWord"
        disabled="@(!isSecretWordEnabled)" />
        <br>
    </div>
    <div class="form-group col-md-6">
        <label for="confirmPassword">Password</label>
        <input type="password" class="form-control" placeholder="Enter password to confirm" @bind="confirmPassword" />
    </div>
    <br>
    <button type="submit" class="btn btn-primary" @onclick="SaveData">Save</button>
</div>


@if (!string.IsNullOrEmpty(errorMessage))
{
    <br>

    <br>
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<br>
@if (!string.IsNullOrEmpty(successMessage))
{
    <br>
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}
<br>
<br>
<h3>
    Please note that if you update (or remove) e-mail address or telephone number you will not be automatically unsubscribed from our newsletters and info messages.
    You can always do it from any e-mail, SMS or other type of messages you get from us. You can also do it by sending us opt-out request.
</h3>


@code {
    private string? email;
    private string? telephone;
    private string? secretWord;
    private string? confirmPassword;
    private bool isEmailEnabled;
    private bool isTelephoneEnabled;
    private bool isSecretWordEnabled;
    private string? errorMessage;
    private string? successMessage;
    private string selectedCountryCode = "";
    private string api => settings.ApiUrl;



    protected override void OnInitialized()
    {
        if (!appState.IsSignedIn)
        {
            navigationManager.NavigateTo("signin");
        }
    }

    private async Task SaveData()
    {
        errorMessage = null;
        successMessage = null;

        ValidateForm();

        if (string.IsNullOrEmpty(errorMessage))
        {

            if (string.IsNullOrEmpty(confirmPassword))
            {
                errorMessage = "Please enter your password!";
                return;
            }
            if (string.IsNullOrEmpty(api))
            {
                MainLogger.LogError("API URL is not set.");
                errorMessage = "Sorry, something went wrong. Please try again later.";
                return;
            }
            var user = new User
                {
                    Id = appState.UserId,
                    Login = appState.Username,
                    Password = confirmPassword
                };
            var personalData = new PersonalData
                {
                    Email = isEmailEnabled ? email : null,
                    Tel = isTelephoneEnabled ? 
                        string.IsNullOrWhiteSpace(telephone) ? "" : $"{selectedCountryCode}{telephone}" 
                        : null,
                    Secret = isSecretWordEnabled ? secretWord : null
                };
            var userData = new UserData
                {
                    User = user,
                    PersonalData = personalData
                };
            var json = JsonSerializer.Serialize(userData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            using var httpClient = new HttpClient();
            var response = await httpClient.PutAsync($"{api}/dataupdate", content);
            var responseObject = await response.Content.ReadFromJsonAsync<ApiResponseUser>();
            if (response.IsSuccessStatusCode)
            {
                if (responseObject is not null && responseObject.Success)
                {
                    successMessage = "Personal Data updated successfully!";
                }
                else
                {
                    errorMessage = "Sorry, something went wrong. Please try again later. Possible reason: "
                    + responseObject?.Error ?? "Unknown error...";
                }
            }
            else
            {
                errorMessage = "Sorry, something went wrong. Please try again later. Possible reason: "
                + responseObject?.Error ?? "Unknown error...";
            }
        }
    }

    private void ValidateForm()
    {
        errorMessage = null;

        if (isEmailEnabled && !string.IsNullOrWhiteSpace(email) && !Regex.IsMatch(email, @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"))
        {
            errorMessage = "Invalid email format";
        }
        else if (isTelephoneEnabled && !string.IsNullOrWhiteSpace(telephone) && !Regex.IsMatch(selectedCountryCode + telephone, @"^\+(\d{1,5})(\d{4,12})$"))
        {
            errorMessage = "Invalid phone number format! Don't forget to pick the country code please.";
        }
        else if (isSecretWordEnabled && !string.IsNullOrWhiteSpace(secretWord) && secretWord.Length < 4)
        {
            errorMessage = "Secret word must be at least 8 characters long.";
        }
        else if (isSecretWordEnabled && !string.IsNullOrWhiteSpace(secretWord) && secretWord.Length > 40)
        {
            errorMessage = "Secret word must be at most 40 characters long.";
        }
        else if (isSecretWordEnabled && !string.IsNullOrWhiteSpace(secretWord) && !Regex.IsMatch(secretWord, Policy.SecretWordRegex))
        {
            errorMessage = "Secret word  can consist only of uppercase letters, lowercase letters and digits.";
        }
    }

}
