@page "/deleteaccount"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@inject AppState appState
@inject NavigationManager navigationManager
@inject ISettings settings

<h1>DeleteAccount</h1>

<p>Username: @username</p>
<p>ID: @userId</p>

<p>Are you sure you want to delete your account?</p>
<br>
<div class="form-group col-md-6">
    <label for="username">Enter your Username:</label>
    <input type="text" id="username" class="form-control" @bind="usernameConfirmed" />
</div>
<br>
<div class="form-group col-md-6">
    <label for="lastDigits">Enter the last 3 digits of ID:</label>
    <input type="text" id="lastDigits" class="form-control" @bind="lastDigits" />
</div>
<br>
<div class="form-group col-md-6">
    <label for="password">Confirm by entering your Password:</label>
    <input type="password" id="password" class="form-control" @bind="passwordConfirmed" />
</div>
<br>
<div class="form-group col-md-12">
    <button type="button" class="btn btn-danger" @onclick="DeleteAccountAsync">Delete Account</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <br>

    <br>
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}


@code {

    private string? username;
    private long userId;
    private string? lastDigits;
    private string? usernameConfirmed;
    private string? passwordConfirmed;
    private string api => settings.ApiUrl;


    private string? errorMessage;

    protected override void OnInitialized()
    {
        if (!appState.IsSignedIn)
        {
            navigationManager.NavigateTo("signin");
        }
        username = appState.Username;
        userId = appState.UserId;
    }

    private async Task DeleteAccountAsync()
    {
        errorMessage = null;
        if (usernameConfirmed is not null
        && passwordConfirmed is not null
        && username is not null
        && usernameConfirmed == username
        && passwordConfirmed.Length > 0)
        {
            if (lastDigits is null || !userId.ToString().EndsWith(lastDigits))
            {
                errorMessage = "ID is incorrect.";
                return;
            }
            if (string.IsNullOrEmpty(api))
            {
                MainLogger.LogError("API URL is not set.");
                errorMessage = "Sorry, something went wrong. Please try again later.";
                return;
            }
            var user = new User
                {
                    Id = userId,
                    Login = usernameConfirmed ?? string.Empty,
                    Password = passwordConfirmed ?? string.Empty
                };
            try
            {
                var json = JsonSerializer.Serialize(user);
                var request = new HttpRequestMessage(HttpMethod.Delete, $"{api}/deleteuser");
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", appState.Token);
                request.Content = new StringContent(json, Encoding.UTF8, "application/json");

                using var httpClient = new HttpClient();
                var response = await httpClient.SendAsync(request);
                var responseObject = await response.Content.ReadFromJsonAsync<ApiResponse>();

                if (response.IsSuccessStatusCode)
                {
                    if (responseObject is not null && responseObject.Success)
                    {
                        navigationManager.NavigateTo("signout");
                    }
                    else
                    {
                        errorMessage = "Sorry, something went wrong. Please try again later. Possible reason: "
                        + responseObject?.Error ??
                        "Unknown error...";
                    }
                }
                else
                {
                    MainLogger.LogError($"An error occurred while deleting account. Username: {username}. Status code: " +
                    response.StatusCode);
                    errorMessage = "An error occurred while deleting your account. Possible reason: "
                    + responseObject?.Error ?? "Unknown error...";
                }
            }
            catch (Exception ex)
            {
                MainLogger.LogError($"An error occurred while deleting account. Username: {username}. Exception: " + ex.Message);
                errorMessage = "An error occurred while deleting your account.";
            }
        }
        else
        {
            errorMessage = "Username is incorrect or password is not entered.";
        }
    }



}
