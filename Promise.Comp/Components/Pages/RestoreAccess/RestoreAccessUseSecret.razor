@page "/restoreaccessusesecret"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@inject AppState appState
@inject NavigationManager navigationManager
@inject ISettings settings

<h1>Restore Access Using Secret Word</h1>



<p>Please enter your userame and secret word you saved previously</p>
<br>
<p>: @username</p>
<br>
<div class="form-group col-md-6">
    <label for="username">Username:</label>
    <input type="password" id="username" class="form-control" @bind="username" />
</div>
<div class="form-group col-md-6">
    <label for="secret">Confirm by entering your Password:</label>
    <input type="password" id="secret" class="form-control" @bind="secret" />
</div>
<br>
<div class="form-group col-md-12">
    <button type="button" class="btn btn-danger" @onclick="RestoreAccessAsync">Restore Access</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <br>
    <br>
    <div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}


@code {

    private string? username;
    private string? secret;

    private string api => settings.ApiUrl;


    private string? errorMessage;

    protected override void OnInitialized()
    {

    }

    private async Task RestoreAccessAsync()
    {
        errorMessage = null; // validate

        if (string.IsNullOrEmpty(errorMessage))
        {

            try
            {
                var json = JsonSerializer.Serialize(user);
                var request = new HttpRequestMessage(HttpMethod.Delete, $"{api}/deleteuser");
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", appState.Token);
                request.Content = new StringContent(json, Encoding.UTF8, "application/json");

                using var httpClient = new HttpClient();
                var response = await httpClient.SendAsync(request);
                var responseObject = await response.Content.ReadFromJsonAsync<ApiResponse>();

                if (response.IsSuccessStatusCode)
                {
                    if (responseObject is not null && responseObject.Success)
                    {
                        navigationManager.NavigateTo("signout");
                    }
                    else
                    {
                        errorMessage = "Sorry, something went wrong. Please try again later. Possible reason: "
                        + responseObject?.Error ??
                        "Unknown error...";
                    }
                }
                else
                {
                    MainLogger.LogError($"An error occurred while deleting account. Username: {username}. Status code: " +
                    response.StatusCode);
                    errorMessage = "An error occurred while deleting your account. Possible reason: "
                    + responseObject?.Error ?? "Unknown error...";
                }
            }
            catch (Exception ex)
            {
                MainLogger.LogError($"An error occurred while deleting account. Username: {username}. Exception: " + ex.Message);
                errorMessage = "An error occurred while deleting your account.";
            }
        }
        else
        {
            errorMessage = "Username is incorrect or password is not entered.";
        }
    }



}
